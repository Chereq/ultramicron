; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32l1xx_wwdg.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32l1xx_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32L1xx_DFP\1.0.2\Device\Include -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DUSE_STM32L152_EVAL ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;291      */
;;;292    void WWDG_ClearFlag(void)
000000  4901              LDR      r1,|L1.8|
;;;293    {
;;;294      WWDG->SR = (uint32_t)RESET;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;295    }
000006  4770              BX       lr
;;;296    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;141      */
;;;142    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02cc              LSLS     r4,r1,#11
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;145      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;146    }
;;;147    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;243      */
;;;244    void WWDG_Enable(uint8_t Counter)
000000  4902              LDR      r1,|L3.12|
;;;245    {
;;;246      /* Check the parameters */
;;;247      assert_param(IS_WWDG_COUNTER(Counter));
;;;248      WWDG->CR = WWDG_CR_WDGA | Counter;
000002  f0400080          ORR      r0,r0,#0x80
000006  6008              STR      r0,[r1,#0]
;;;249    }
000008  4770              BX       lr
;;;250    
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;199      */
;;;200    void WWDG_EnableIT(void)
000000  4902              LDR      r1,|L4.12|
;;;201    {
;;;202      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  2001              MOVS     r0,#1
000004  f8c100a4          STR      r0,[r1,#0xa4]
;;;203    }
000008  4770              BX       lr
;;;204    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42058000

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;271      */
;;;272    FlagStatus WWDG_GetFlagStatus(void)
000000  4903              LDR      r1,|L5.16|
;;;273    {
;;;274      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;275        
;;;276      if ((WWDG->SR) != (uint32_t)RESET)
000004  6809              LDR      r1,[r1,#0]
000006  2900              CMP      r1,#0                 ;273
000008  d000              BEQ      |L5.12|
;;;277      {
;;;278        bitstatus = SET;
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;279      }
;;;280      else
;;;281      {
;;;282        bitstatus = RESET;
;;;283      }
;;;284      return bitstatus;
;;;285    }
00000c  4770              BX       lr
;;;286    
                          ENDP

00000e  0000              DCW      0x0000
                  |L5.16|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;211      */
;;;212    void WWDG_SetCounter(uint8_t Counter)
000000  4902              LDR      r1,|L6.12|
;;;213    {
;;;214      /* Check the parameters */
;;;215      assert_param(IS_WWDG_COUNTER(Counter));
;;;216      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;217         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;218      WWDG->CR = Counter & BIT_MASK;
000002  f000007f          AND      r0,r0,#0x7f
000006  6008              STR      r0,[r1,#0]
;;;219    }
000008  4770              BX       lr
;;;220    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;157      */
;;;158    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  4a03              LDR      r2,|L7.16|
;;;159    {
;;;160      uint32_t tmpreg = 0;
;;;161      /* Check the parameters */
;;;162      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;163      /* Clear WDGTB[1:0] bits */
;;;164      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000002  6811              LDR      r1,[r2,#0]
000004  f42171c0          BIC      r1,r1,#0x180
;;;165      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;166      tmpreg |= WWDG_Prescaler;
000008  4301              ORRS     r1,r1,r0
;;;167      /* Store the new value */
;;;168      WWDG->CFR = tmpreg;
00000a  6011              STR      r1,[r2,#0]
;;;169    }
00000c  4770              BX       lr
;;;170    
                          ENDP

00000e  0000              DCW      0x0000
                  |L7.16|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;176      */
;;;177    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  4905              LDR      r1,|L8.24|
;;;178    {
000002  b508              PUSH     {r3,lr}
;;;179      __IO uint32_t tmpreg = 0;
;;;180    
;;;181      /* Check the parameters */
;;;182      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;183      /* Clear W[6:0] bits */
;;;184    
;;;185      tmpreg = WWDG->CFR & CFR_W_MASK;
000004  680a              LDR      r2,[r1,#0]
;;;186    
;;;187      /* Set W[6:0] bits according to WindowValue value */
;;;188      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000006  f000007f          AND      r0,r0,#0x7f
00000a  f022027f          BIC      r2,r2,#0x7f           ;185
00000e  4310              ORRS     r0,r0,r2
;;;189    
;;;190      /* Store the new value */
;;;191      WWDG->CFR = tmpreg;
000010  9000              STR      r0,[sp,#0]
000012  6008              STR      r0,[r1,#0]
;;;192    }
000014  bd08              POP      {r3,pc}
;;;193    
                          ENDP

000016  0000              DCW      0x0000
                  |L8.24|
                          DCD      0x40002c04

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_wwdg_c_9668c0ca____REV16|
#line 129 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\4.1.1\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32l1xx_wwdg_c_9668c0ca____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_wwdg_c_9668c0ca____REVSH|
#line 144
|__asm___16_stm32l1xx_wwdg_c_9668c0ca____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
