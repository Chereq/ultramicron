; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32303c_eval\stm32l1xx_aes_util.o --asm_dir=.\STM32303C_EVAL\ --list_dir=.\STM32303C_EVAL\ --depend=.\stm32303c_eval\stm32l1xx_aes_util.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\\STM32F30x\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32F30x_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32303C_EVAL -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil\ARM\PACK\Keil\STM32L1xx_DFP\1.0.2\Device\Include -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DUSE_STM32L152_EVAL ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_aes_util.c]
                          THUMB

                          AREA ||i.AES_CBC_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_CBC_Decrypt PROC
;;;370      */
;;;371    ErrorStatus AES_CBC_Decrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;372    {
000004  b08c              SUB      sp,sp,#0x30
;;;373      AES_InitTypeDef AES_InitStructure;
;;;374      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;375      AES_IVInitTypeDef AES_IVInitStructure;
;;;376      ErrorStatus status = SUCCESS;
;;;377      uint32_t keyaddr    = (uint32_t)Key;
;;;378      uint32_t inputaddr  = (uint32_t)Input;
;;;379      uint32_t outputaddr = (uint32_t)Output;
;;;380      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;381      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  460f              MOV      r7,r1                 ;380
;;;382      uint32_t ccstatus = 0;
;;;383      uint32_t i = 0;
;;;384      
;;;385      /* AES Key initialisation*/
;;;386      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000c  f8cda02c          STR      r10,[sp,#0x2c]
000010  6801              LDR      r1,[r0,#0]
000012  9d14              LDR      r5,[sp,#0x50]         ;381
000014  ba09              REV      r1,r1
;;;387      keyaddr += 4;
;;;388      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000016  9103              STR      r1,[sp,#0xc]
000018  6841              LDR      r1,[r0,#4]
00001a  4699              MOV      r9,r3                 ;372
00001c  ba09              REV      r1,r1
;;;389      keyaddr += 4;
;;;390      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001e  9102              STR      r1,[sp,#8]
000020  6881              LDR      r1,[r0,#8]
000022  4614              MOV      r4,r2                 ;372
000024  ba09              REV      r1,r1
;;;391      keyaddr += 4;
;;;392      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000026  9101              STR      r1,[sp,#4]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f04f0801          MOV      r8,#1                 ;376
00002e  ba00              REV      r0,r0
;;;393      AES_KeyInit(&AES_KeyInitStructure);
000030  9000              STR      r0,[sp,#0]
000032  4656              MOV      r6,r10                ;383
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       AES_KeyInit
;;;394    
;;;395      /* AES Initialization Vectors */
;;;396      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
00003a  6838              LDR      r0,[r7,#0]
00003c  ba00              REV      r0,r0
;;;397      ivaddr += 4;
;;;398      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00003e  9007              STR      r0,[sp,#0x1c]
000040  6878              LDR      r0,[r7,#4]
000042  ba00              REV      r0,r0
;;;399      ivaddr += 4;
;;;400      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000044  9006              STR      r0,[sp,#0x18]
000046  68b8              LDR      r0,[r7,#8]
000048  ba00              REV      r0,r0
;;;401      ivaddr += 4;
;;;402      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  68f8              LDR      r0,[r7,#0xc]
00004e  ba00              REV      r0,r0
;;;403      AES_IVInit(&AES_IVInitStructure);
000050  9004              STR      r0,[sp,#0x10]
000052  a804              ADD      r0,sp,#0x10
000054  f7fffffe          BL       AES_IVInit
;;;404    
;;;405      /* AES configuration */
;;;406      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
000058  2018              MOVS     r0,#0x18
;;;407      AES_InitStructure.AES_Chaining = AES_Chaining_CBC;
00005a  9008              STR      r0,[sp,#0x20]
00005c  2020              MOVS     r0,#0x20
;;;408      AES_InitStructure.AES_DataType = AES_DataType_8b;
00005e  9009              STR      r0,[sp,#0x24]
000060  2004              MOVS     r0,#4
;;;409      AES_Init(&AES_InitStructure);
000062  900a              STR      r0,[sp,#0x28]
000064  a808              ADD      r0,sp,#0x20
000066  f7fffffe          BL       AES_Init
;;;410    
;;;411      /* Enable AES */
;;;412      AES_Cmd(ENABLE);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       AES_Cmd
;;;413    
;;;414      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000070  e030              B        |L1.212|
                  |L1.114|
;;;415      {
;;;416        AES_WriteSubData(*(uint32_t*)(inputaddr));
000072  6820              LDR      r0,[r4,#0]
000074  f7fffffe          BL       AES_WriteSubData
;;;417        inputaddr += 4;
;;;418        AES_WriteSubData(*(uint32_t*)(inputaddr));
000078  f8540f04          LDR      r0,[r4,#4]!
00007c  f7fffffe          BL       AES_WriteSubData
;;;419        inputaddr += 4;
;;;420        AES_WriteSubData(*(uint32_t*)(inputaddr));
000080  f8540f04          LDR      r0,[r4,#4]!
000084  f7fffffe          BL       AES_WriteSubData
;;;421        inputaddr += 4;
;;;422        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  f8540f04          LDR      r0,[r4,#4]!
00008c  f7fffffe          BL       AES_WriteSubData
;;;423        inputaddr += 4;
;;;424        
;;;425        /* Wait for CCF flag to be set */
;;;426        counter = 0;
;;;427        do
;;;428        {
;;;429          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;430          counter++;
;;;431        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
000090  f44f3780          MOV      r7,#0x10000
000094  1d24              ADDS     r4,r4,#4
000096  f8cda02c          STR      r10,[sp,#0x2c]
                  |L1.154|
00009a  2001              MOVS     r0,#1                 ;429
00009c  f7fffffe          BL       AES_GetFlagStatus
0000a0  990b              LDR      r1,[sp,#0x2c]         ;430
0000a2  1c49              ADDS     r1,r1,#1              ;430
0000a4  910b              STR      r1,[sp,#0x2c]
0000a6  42b9              CMP      r1,r7
0000a8  d002              BEQ      |L1.176|
0000aa  2800              CMP      r0,#0
0000ac  d0f5              BEQ      |L1.154|
0000ae  e000              B        |L1.178|
                  |L1.176|
;;;432    
;;;433        if (ccstatus == RESET)
0000b0  b1e0              CBZ      r0,|L1.236|
                  |L1.178|
;;;434        {
;;;435          status = ERROR;
;;;436        }
;;;437        else
;;;438        {
;;;439          /* Clear CCF flag */
;;;440          AES_ClearFlag(AES_FLAG_CCF);
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       AES_ClearFlag
;;;441    
;;;442          /* Read cipher text */
;;;443          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b8  f7fffffe          BL       AES_ReadSubData
;;;444          outputaddr += 4;
;;;445          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000bc  6028              STR      r0,[r5,#0]
0000be  f7fffffe          BL       AES_ReadSubData
;;;446          outputaddr += 4;
;;;447          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c2  6068              STR      r0,[r5,#4]
0000c4  f7fffffe          BL       AES_ReadSubData
;;;448          outputaddr += 4;
;;;449          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c8  60a8              STR      r0,[r5,#8]
0000ca  f7fffffe          BL       AES_ReadSubData
0000ce  60e8              STR      r0,[r5,#0xc]
0000d0  3510              ADDS     r5,r5,#0x10
                  |L1.210|
0000d2  3610              ADDS     r6,r6,#0x10
                  |L1.212|
0000d4  454e              CMP      r6,r9                 ;414
0000d6  d202              BCS      |L1.222|
0000d8  f1b80f00          CMP      r8,#0                 ;414
0000dc  d1c9              BNE      |L1.114|
                  |L1.222|
;;;450          outputaddr += 4;
;;;451        }
;;;452      }
;;;453    
;;;454      /* Disable AES before starting new processing */
;;;455      AES_Cmd(DISABLE);
0000de  2000              MOVS     r0,#0
0000e0  f7fffffe          BL       AES_Cmd
;;;456    
;;;457      return status;
;;;458    }
0000e4  b00c              ADD      sp,sp,#0x30
0000e6  4640              MOV      r0,r8                 ;457
0000e8  e8bd87f0          POP      {r4-r10,pc}
                  |L1.236|
0000ec  f04f0800          MOV      r8,#0                 ;435
0000f0  e7ef              B        |L1.210|
;;;459    
                          ENDP


                          AREA ||i.AES_CBC_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_CBC_Encrypt PROC
;;;270      */
;;;271    ErrorStatus AES_CBC_Encrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;272    {
000004  b08c              SUB      sp,sp,#0x30
;;;273      AES_InitTypeDef AES_InitStructure;
;;;274      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;275      AES_IVInitTypeDef AES_IVInitStructure;
;;;276      ErrorStatus status = SUCCESS;
;;;277      uint32_t keyaddr    = (uint32_t)Key;
;;;278      uint32_t inputaddr  = (uint32_t)Input;
;;;279      uint32_t outputaddr = (uint32_t)Output;
;;;280      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;281      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  460e              MOV      r6,r1                 ;280
;;;282      uint32_t ccstatus = 0;
;;;283      uint32_t i = 0;
;;;284    
;;;285      /* AES Key initialisation*/
;;;286      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000c  f8cda02c          STR      r10,[sp,#0x2c]
000010  6801              LDR      r1,[r0,#0]
000012  9d14              LDR      r5,[sp,#0x50]         ;281
000014  ba09              REV      r1,r1
;;;287      keyaddr += 4;
;;;288      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000016  9103              STR      r1,[sp,#0xc]
000018  6841              LDR      r1,[r0,#4]
00001a  4699              MOV      r9,r3                 ;272
00001c  ba09              REV      r1,r1
;;;289      keyaddr += 4;
;;;290      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001e  9102              STR      r1,[sp,#8]
000020  6881              LDR      r1,[r0,#8]
000022  4614              MOV      r4,r2                 ;272
000024  ba09              REV      r1,r1
;;;291      keyaddr += 4;
;;;292      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000026  9101              STR      r1,[sp,#4]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f04f0801          MOV      r8,#1                 ;276
00002e  ba00              REV      r0,r0
;;;293      AES_KeyInit(&AES_KeyInitStructure);
000030  9000              STR      r0,[sp,#0]
000032  4657              MOV      r7,r10                ;283
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       AES_KeyInit
;;;294    
;;;295      /* AES Initialization Vectors */
;;;296      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
;;;297      ivaddr += 4;
;;;298      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00003e  9007              STR      r0,[sp,#0x1c]
000040  6870              LDR      r0,[r6,#4]
000042  ba00              REV      r0,r0
;;;299      ivaddr += 4;
;;;300      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000044  9006              STR      r0,[sp,#0x18]
000046  68b0              LDR      r0,[r6,#8]
000048  ba00              REV      r0,r0
;;;301      ivaddr += 4;
;;;302      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  68f0              LDR      r0,[r6,#0xc]
00004e  ba00              REV      r0,r0
;;;303      AES_IVInit(&AES_IVInitStructure);
000050  9004              STR      r0,[sp,#0x10]
000052  a804              ADD      r0,sp,#0x10
000054  f7fffffe          BL       AES_IVInit
;;;304    
;;;305      /* AES configuration */
;;;306      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
;;;307      AES_InitStructure.AES_Chaining = AES_Chaining_CBC;
000058  2020              MOVS     r0,#0x20
00005a  e9cda008          STRD     r10,r0,[sp,#0x20]
;;;308      AES_InitStructure.AES_DataType = AES_DataType_8b;
00005e  2004              MOVS     r0,#4
;;;309      AES_Init(&AES_InitStructure);
000060  900a              STR      r0,[sp,#0x28]
000062  a808              ADD      r0,sp,#0x20
000064  f7fffffe          BL       AES_Init
;;;310    
;;;311      /* Enable AES */
;;;312      AES_Cmd(ENABLE);
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       AES_Cmd
;;;313    
;;;314      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
00006e  e030              B        |L2.210|
                  |L2.112|
;;;315      {
;;;316        AES_WriteSubData(*(uint32_t*)(inputaddr));
000070  6820              LDR      r0,[r4,#0]
000072  f7fffffe          BL       AES_WriteSubData
;;;317        inputaddr += 4;
;;;318        AES_WriteSubData(*(uint32_t*)(inputaddr));
000076  f8540f04          LDR      r0,[r4,#4]!
00007a  f7fffffe          BL       AES_WriteSubData
;;;319        inputaddr += 4;
;;;320        AES_WriteSubData(*(uint32_t*)(inputaddr));
00007e  f8540f04          LDR      r0,[r4,#4]!
000082  f7fffffe          BL       AES_WriteSubData
;;;321        inputaddr += 4;
;;;322        AES_WriteSubData(*(uint32_t*)(inputaddr));
000086  f8540f04          LDR      r0,[r4,#4]!
00008a  f7fffffe          BL       AES_WriteSubData
;;;323        inputaddr += 4;
;;;324        
;;;325        /* Wait for CCF flag to be set */
;;;326        counter = 0;
;;;327        do
;;;328        {
;;;329          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;330          counter++;
;;;331        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
00008e  f44f3680          MOV      r6,#0x10000
000092  1d24              ADDS     r4,r4,#4
000094  f8cda02c          STR      r10,[sp,#0x2c]
                  |L2.152|
000098  2001              MOVS     r0,#1                 ;329
00009a  f7fffffe          BL       AES_GetFlagStatus
00009e  990b              LDR      r1,[sp,#0x2c]         ;330
0000a0  1c49              ADDS     r1,r1,#1              ;330
0000a2  910b              STR      r1,[sp,#0x2c]
0000a4  42b1              CMP      r1,r6
0000a6  d002              BEQ      |L2.174|
0000a8  2800              CMP      r0,#0
0000aa  d0f5              BEQ      |L2.152|
0000ac  e000              B        |L2.176|
                  |L2.174|
;;;332        
;;;333        if (ccstatus == RESET)
0000ae  b1e0              CBZ      r0,|L2.234|
                  |L2.176|
;;;334        {
;;;335          status = ERROR;
;;;336        }
;;;337        else
;;;338        {
;;;339          /* Clear CCF flag */
;;;340          AES_ClearFlag(AES_FLAG_CCF);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       AES_ClearFlag
;;;341    
;;;342          /* Read cipher text */
;;;343          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b6  f7fffffe          BL       AES_ReadSubData
;;;344          outputaddr += 4;
;;;345          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ba  6028              STR      r0,[r5,#0]
0000bc  f7fffffe          BL       AES_ReadSubData
;;;346          outputaddr += 4;
;;;347          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c0  6068              STR      r0,[r5,#4]
0000c2  f7fffffe          BL       AES_ReadSubData
;;;348          outputaddr += 4;
;;;349          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c6  60a8              STR      r0,[r5,#8]
0000c8  f7fffffe          BL       AES_ReadSubData
0000cc  60e8              STR      r0,[r5,#0xc]
0000ce  3510              ADDS     r5,r5,#0x10
                  |L2.208|
0000d0  3710              ADDS     r7,r7,#0x10
                  |L2.210|
0000d2  454f              CMP      r7,r9                 ;314
0000d4  d202              BCS      |L2.220|
0000d6  f1b80f00          CMP      r8,#0                 ;314
0000da  d1c9              BNE      |L2.112|
                  |L2.220|
;;;350          outputaddr += 4;
;;;351        }
;;;352      }
;;;353    
;;;354      /* Disable AES before starting new processing */
;;;355      AES_Cmd(DISABLE);
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       AES_Cmd
;;;356    
;;;357      return status;
;;;358    }
0000e2  b00c              ADD      sp,sp,#0x30
0000e4  4640              MOV      r0,r8                 ;357
0000e6  e8bd87f0          POP      {r4-r10,pc}
                  |L2.234|
0000ea  f04f0800          MOV      r8,#0                 ;335
0000ee  e7ef              B        |L2.208|
;;;359    
                          ENDP


                          AREA ||i.AES_CTR_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_CTR_Decrypt PROC
;;;571      */
;;;572    ErrorStatus AES_CTR_Decrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;573    {
000004  b08c              SUB      sp,sp,#0x30
;;;574      AES_InitTypeDef AES_InitStructure;
;;;575      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;576      AES_IVInitTypeDef AES_IVInitStructure;
;;;577    
;;;578      ErrorStatus status = SUCCESS;
;;;579      uint32_t keyaddr    = (uint32_t)Key;
;;;580      uint32_t inputaddr  = (uint32_t)Input;
;;;581      uint32_t outputaddr = (uint32_t)Output;
;;;582      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;583      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  460f              MOV      r7,r1                 ;582
;;;584      uint32_t ccstatus = 0;
;;;585      uint32_t i = 0;
;;;586    
;;;587      /* AES Key initialisation*/
;;;588      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000c  f8cda02c          STR      r10,[sp,#0x2c]
000010  6801              LDR      r1,[r0,#0]
000012  9d14              LDR      r5,[sp,#0x50]         ;583
000014  ba09              REV      r1,r1
;;;589      keyaddr += 4;
;;;590      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000016  9103              STR      r1,[sp,#0xc]
000018  6841              LDR      r1,[r0,#4]
00001a  4699              MOV      r9,r3                 ;573
00001c  ba09              REV      r1,r1
;;;591      keyaddr += 4;
;;;592      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001e  9102              STR      r1,[sp,#8]
000020  6881              LDR      r1,[r0,#8]
000022  4614              MOV      r4,r2                 ;573
000024  ba09              REV      r1,r1
;;;593      keyaddr += 4;
;;;594      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000026  9101              STR      r1,[sp,#4]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f04f0801          MOV      r8,#1                 ;578
00002e  ba00              REV      r0,r0
;;;595      AES_KeyInit(&AES_KeyInitStructure);
000030  9000              STR      r0,[sp,#0]
000032  4656              MOV      r6,r10                ;585
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       AES_KeyInit
;;;596    
;;;597      /* AES Initialization Vectors */
;;;598      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
00003a  6838              LDR      r0,[r7,#0]
00003c  ba00              REV      r0,r0
;;;599      ivaddr += 4;
;;;600      AES_IVInitStructure.AES_IV2 = __REV(*(uint32_t*)(ivaddr));
00003e  9007              STR      r0,[sp,#0x1c]
000040  6878              LDR      r0,[r7,#4]
000042  ba00              REV      r0,r0
;;;601      ivaddr += 4;
;;;602      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000044  9006              STR      r0,[sp,#0x18]
000046  68b8              LDR      r0,[r7,#8]
000048  ba00              REV      r0,r0
;;;603      ivaddr += 4;
;;;604      AES_IVInitStructure.AES_IV0 = __REV(*(uint32_t*)(ivaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  68f8              LDR      r0,[r7,#0xc]
00004e  ba00              REV      r0,r0
;;;605      AES_IVInit(&AES_IVInitStructure);
000050  9004              STR      r0,[sp,#0x10]
000052  a804              ADD      r0,sp,#0x10
000054  f7fffffe          BL       AES_IVInit
;;;606    
;;;607      /* AES configuration */
;;;608      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
000058  2018              MOVS     r0,#0x18
;;;609      AES_InitStructure.AES_Chaining = AES_Chaining_CTR;
00005a  9008              STR      r0,[sp,#0x20]
00005c  2040              MOVS     r0,#0x40
;;;610      AES_InitStructure.AES_DataType = AES_DataType_8b;
00005e  9009              STR      r0,[sp,#0x24]
000060  2004              MOVS     r0,#4
;;;611      AES_Init(&AES_InitStructure);
000062  900a              STR      r0,[sp,#0x28]
000064  a808              ADD      r0,sp,#0x20
000066  f7fffffe          BL       AES_Init
;;;612    
;;;613      /* Enable AES */
;;;614      AES_Cmd(ENABLE);
00006a  2001              MOVS     r0,#1
00006c  f7fffffe          BL       AES_Cmd
;;;615    
;;;616      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000070  e030              B        |L3.212|
                  |L3.114|
;;;617      {
;;;618        AES_WriteSubData(*(uint32_t*)(inputaddr));
000072  6820              LDR      r0,[r4,#0]
000074  f7fffffe          BL       AES_WriteSubData
;;;619        inputaddr += 4;
;;;620        AES_WriteSubData(*(uint32_t*)(inputaddr));
000078  f8540f04          LDR      r0,[r4,#4]!
00007c  f7fffffe          BL       AES_WriteSubData
;;;621        inputaddr += 4;
;;;622        AES_WriteSubData(*(uint32_t*)(inputaddr));
000080  f8540f04          LDR      r0,[r4,#4]!
000084  f7fffffe          BL       AES_WriteSubData
;;;623        inputaddr += 4;
;;;624        AES_WriteSubData(*(uint32_t*)(inputaddr));
000088  f8540f04          LDR      r0,[r4,#4]!
00008c  f7fffffe          BL       AES_WriteSubData
;;;625        inputaddr += 4;
;;;626        
;;;627        /* Wait for CCF flag to be set */
;;;628        counter = 0;
;;;629        do
;;;630        {
;;;631          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;632          counter++;
;;;633        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
000090  f44f3780          MOV      r7,#0x10000
000094  1d24              ADDS     r4,r4,#4
000096  f8cda02c          STR      r10,[sp,#0x2c]
                  |L3.154|
00009a  2001              MOVS     r0,#1                 ;631
00009c  f7fffffe          BL       AES_GetFlagStatus
0000a0  990b              LDR      r1,[sp,#0x2c]         ;632
0000a2  1c49              ADDS     r1,r1,#1              ;632
0000a4  910b              STR      r1,[sp,#0x2c]
0000a6  42b9              CMP      r1,r7
0000a8  d002              BEQ      |L3.176|
0000aa  2800              CMP      r0,#0
0000ac  d0f5              BEQ      |L3.154|
0000ae  e000              B        |L3.178|
                  |L3.176|
;;;634    
;;;635        if (ccstatus == RESET)
0000b0  b1e0              CBZ      r0,|L3.236|
                  |L3.178|
;;;636        {
;;;637          status = ERROR;
;;;638        }
;;;639        else
;;;640        {
;;;641          /* Clear CCF flag */
;;;642          AES_ClearFlag(AES_FLAG_CCF);
0000b2  2001              MOVS     r0,#1
0000b4  f7fffffe          BL       AES_ClearFlag
;;;643        
;;;644          /* Read cipher text */
;;;645          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b8  f7fffffe          BL       AES_ReadSubData
;;;646          outputaddr += 4;
;;;647          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000bc  6028              STR      r0,[r5,#0]
0000be  f7fffffe          BL       AES_ReadSubData
;;;648          outputaddr += 4;
;;;649          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c2  6068              STR      r0,[r5,#4]
0000c4  f7fffffe          BL       AES_ReadSubData
;;;650          outputaddr += 4;
;;;651          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c8  60a8              STR      r0,[r5,#8]
0000ca  f7fffffe          BL       AES_ReadSubData
0000ce  60e8              STR      r0,[r5,#0xc]
0000d0  3510              ADDS     r5,r5,#0x10
                  |L3.210|
0000d2  3610              ADDS     r6,r6,#0x10
                  |L3.212|
0000d4  454e              CMP      r6,r9                 ;616
0000d6  d202              BCS      |L3.222|
0000d8  f1b80f00          CMP      r8,#0                 ;616
0000dc  d1c9              BNE      |L3.114|
                  |L3.222|
;;;652          outputaddr += 4;
;;;653        }
;;;654      }
;;;655    
;;;656      /* Disable AES before starting new processing */
;;;657      AES_Cmd(DISABLE);
0000de  2000              MOVS     r0,#0
0000e0  f7fffffe          BL       AES_Cmd
;;;658    
;;;659      return status;
;;;660    }
0000e4  b00c              ADD      sp,sp,#0x30
0000e6  4640              MOV      r0,r8                 ;659
0000e8  e8bd87f0          POP      {r4-r10,pc}
                  |L3.236|
0000ec  f04f0800          MOV      r8,#0                 ;637
0000f0  e7ef              B        |L3.210|
;;;661    
                          ENDP


                          AREA ||i.AES_CTR_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_CTR_Encrypt PROC
;;;470      */
;;;471    ErrorStatus AES_CTR_Encrypt(uint8_t* Key, uint8_t InitVectors[16], uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;472    {
000004  b08c              SUB      sp,sp,#0x30
;;;473      AES_InitTypeDef AES_InitStructure;
;;;474      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;475      AES_IVInitTypeDef AES_IVInitStructure;
;;;476    
;;;477      ErrorStatus status = SUCCESS;
;;;478      uint32_t keyaddr    = (uint32_t)Key;
;;;479      uint32_t inputaddr  = (uint32_t)Input;
;;;480      uint32_t outputaddr = (uint32_t)Output;
;;;481      uint32_t ivaddr     = (uint32_t)InitVectors;
;;;482      __IO uint32_t counter = 0;
000006  f04f0a00          MOV      r10,#0
00000a  460e              MOV      r6,r1                 ;481
;;;483      uint32_t ccstatus = 0;
;;;484      uint32_t i = 0;
;;;485    
;;;486      /* AES key initialisation*/
;;;487      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000c  f8cda02c          STR      r10,[sp,#0x2c]
000010  6801              LDR      r1,[r0,#0]
000012  9d14              LDR      r5,[sp,#0x50]         ;482
000014  ba09              REV      r1,r1
;;;488      keyaddr += 4;
;;;489      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000016  9103              STR      r1,[sp,#0xc]
000018  6841              LDR      r1,[r0,#4]
00001a  4699              MOV      r9,r3                 ;472
00001c  ba09              REV      r1,r1
;;;490      keyaddr += 4;
;;;491      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001e  9102              STR      r1,[sp,#8]
000020  6881              LDR      r1,[r0,#8]
000022  4614              MOV      r4,r2                 ;472
000024  ba09              REV      r1,r1
;;;492      keyaddr += 4;
;;;493      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000026  9101              STR      r1,[sp,#4]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  f04f0801          MOV      r8,#1                 ;477
00002e  ba00              REV      r0,r0
;;;494      AES_KeyInit(&AES_KeyInitStructure);
000030  9000              STR      r0,[sp,#0]
000032  4657              MOV      r7,r10                ;484
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       AES_KeyInit
;;;495    
;;;496      /* AES Initialization Vectors */
;;;497      AES_IVInitStructure.AES_IV3 = __REV(*(uint32_t*)(ivaddr));
00003a  6830              LDR      r0,[r6,#0]
00003c  ba00              REV      r0,r0
;;;498      ivaddr += 4;
;;;499      AES_IVInitStructure.AES_IV2= __REV(*(uint32_t*)(ivaddr));
00003e  9007              STR      r0,[sp,#0x1c]
000040  6870              LDR      r0,[r6,#4]
000042  ba00              REV      r0,r0
;;;500      ivaddr += 4;
;;;501      AES_IVInitStructure.AES_IV1 = __REV(*(uint32_t*)(ivaddr));
000044  9006              STR      r0,[sp,#0x18]
000046  68b0              LDR      r0,[r6,#8]
000048  ba00              REV      r0,r0
;;;502      ivaddr += 4;
;;;503      AES_IVInitStructure.AES_IV0= __REV(*(uint32_t*)(ivaddr));
00004a  9005              STR      r0,[sp,#0x14]
00004c  68f0              LDR      r0,[r6,#0xc]
00004e  ba00              REV      r0,r0
;;;504      AES_IVInit(&AES_IVInitStructure);
000050  9004              STR      r0,[sp,#0x10]
000052  a804              ADD      r0,sp,#0x10
000054  f7fffffe          BL       AES_IVInit
;;;505    
;;;506      /* AES configuration */
;;;507      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
;;;508      AES_InitStructure.AES_Chaining = AES_Chaining_CTR;
000058  2040              MOVS     r0,#0x40
00005a  e9cda008          STRD     r10,r0,[sp,#0x20]
;;;509      AES_InitStructure.AES_DataType = AES_DataType_8b;
00005e  2004              MOVS     r0,#4
;;;510      AES_Init(&AES_InitStructure);
000060  900a              STR      r0,[sp,#0x28]
000062  a808              ADD      r0,sp,#0x20
000064  f7fffffe          BL       AES_Init
;;;511    
;;;512      /* Enable AES */
;;;513      AES_Cmd(ENABLE);
000068  2001              MOVS     r0,#1
00006a  f7fffffe          BL       AES_Cmd
;;;514    
;;;515      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
00006e  e030              B        |L4.210|
                  |L4.112|
;;;516      {
;;;517        AES_WriteSubData(*(uint32_t*)(inputaddr));
000070  6820              LDR      r0,[r4,#0]
000072  f7fffffe          BL       AES_WriteSubData
;;;518        inputaddr += 4;
;;;519        AES_WriteSubData(*(uint32_t*)(inputaddr));
000076  f8540f04          LDR      r0,[r4,#4]!
00007a  f7fffffe          BL       AES_WriteSubData
;;;520        inputaddr += 4;
;;;521        AES_WriteSubData(*(uint32_t*)(inputaddr));
00007e  f8540f04          LDR      r0,[r4,#4]!
000082  f7fffffe          BL       AES_WriteSubData
;;;522        inputaddr += 4;
;;;523        AES_WriteSubData(*(uint32_t*)(inputaddr));
000086  f8540f04          LDR      r0,[r4,#4]!
00008a  f7fffffe          BL       AES_WriteSubData
;;;524        inputaddr += 4;
;;;525        
;;;526        /* Wait for CCF flag to be set */
;;;527        counter = 0;
;;;528        do
;;;529        {
;;;530          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;531          counter++;
;;;532        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
00008e  f44f3680          MOV      r6,#0x10000
000092  1d24              ADDS     r4,r4,#4
000094  f8cda02c          STR      r10,[sp,#0x2c]
                  |L4.152|
000098  2001              MOVS     r0,#1                 ;530
00009a  f7fffffe          BL       AES_GetFlagStatus
00009e  990b              LDR      r1,[sp,#0x2c]         ;531
0000a0  1c49              ADDS     r1,r1,#1              ;531
0000a2  910b              STR      r1,[sp,#0x2c]
0000a4  42b1              CMP      r1,r6
0000a6  d002              BEQ      |L4.174|
0000a8  2800              CMP      r0,#0
0000aa  d0f5              BEQ      |L4.152|
0000ac  e000              B        |L4.176|
                  |L4.174|
;;;533    
;;;534        if (ccstatus == RESET)
0000ae  b1e0              CBZ      r0,|L4.234|
                  |L4.176|
;;;535        {
;;;536          status = ERROR;
;;;537        }
;;;538        else
;;;539        {
;;;540          /* Clear CCF flag */
;;;541          AES_ClearFlag(AES_FLAG_CCF);
0000b0  2001              MOVS     r0,#1
0000b2  f7fffffe          BL       AES_ClearFlag
;;;542    
;;;543          /* Read cipher text */
;;;544          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000b6  f7fffffe          BL       AES_ReadSubData
;;;545          outputaddr += 4;
;;;546          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000ba  6028              STR      r0,[r5,#0]
0000bc  f7fffffe          BL       AES_ReadSubData
;;;547          outputaddr += 4;
;;;548          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c0  6068              STR      r0,[r5,#4]
0000c2  f7fffffe          BL       AES_ReadSubData
;;;549          outputaddr += 4;
;;;550          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000c6  60a8              STR      r0,[r5,#8]
0000c8  f7fffffe          BL       AES_ReadSubData
0000cc  60e8              STR      r0,[r5,#0xc]
0000ce  3510              ADDS     r5,r5,#0x10
                  |L4.208|
0000d0  3710              ADDS     r7,r7,#0x10
                  |L4.210|
0000d2  454f              CMP      r7,r9                 ;515
0000d4  d202              BCS      |L4.220|
0000d6  f1b80f00          CMP      r8,#0                 ;515
0000da  d1c9              BNE      |L4.112|
                  |L4.220|
;;;551          outputaddr += 4;
;;;552        }
;;;553      }
;;;554    
;;;555      /* Disable AES before starting new processing */
;;;556      AES_Cmd(DISABLE);
0000dc  2000              MOVS     r0,#0
0000de  f7fffffe          BL       AES_Cmd
;;;557    
;;;558      return status;
;;;559    }
0000e2  b00c              ADD      sp,sp,#0x30
0000e4  4640              MOV      r0,r8                 ;558
0000e6  e8bd87f0          POP      {r4-r10,pc}
                  |L4.234|
0000ea  f04f0800          MOV      r8,#0                 ;536
0000ee  e7ef              B        |L4.208|
;;;560    
                          ENDP


                          AREA ||i.AES_ECB_Decrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_Decrypt PROC
;;;182      */
;;;183    ErrorStatus AES_ECB_Decrypt(uint8_t* Key, uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;184    {
000004  b088              SUB      sp,sp,#0x20
;;;185      AES_InitTypeDef AES_InitStructure;
;;;186      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;187      ErrorStatus status = SUCCESS;
;;;188      uint32_t keyaddr    = (uint32_t)Key;
;;;189      uint32_t inputaddr  = (uint32_t)Input;
;;;190      uint32_t outputaddr = (uint32_t)Output;
;;;191      __IO uint32_t counter = 0;
000006  f04f0900          MOV      r9,#0
00000a  460c              MOV      r4,r1                 ;189
;;;192      uint32_t ccstatus = 0;
;;;193      uint32_t i = 0;
;;;194    
;;;195      /* AES Key initialisation */
;;;196      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000c  f8cd901c          STR      r9,[sp,#0x1c]
000010  6801              LDR      r1,[r0,#0]
000012  461d              MOV      r5,r3                 ;184
000014  ba09              REV      r1,r1
;;;197      keyaddr += 4;
;;;198      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000016  9103              STR      r1,[sp,#0xc]
000018  6841              LDR      r1,[r0,#4]
00001a  4690              MOV      r8,r2                 ;184
00001c  ba09              REV      r1,r1
;;;199      keyaddr += 4;
;;;200      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001e  9102              STR      r1,[sp,#8]
000020  6881              LDR      r1,[r0,#8]
000022  2701              MOVS     r7,#1                 ;187
000024  ba09              REV      r1,r1
;;;201      keyaddr += 4;
;;;202      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000026  9101              STR      r1,[sp,#4]
000028  68c0              LDR      r0,[r0,#0xc]
00002a  464e              MOV      r6,r9                 ;193
00002c  ba00              REV      r0,r0
;;;203      AES_KeyInit(&AES_KeyInitStructure);
00002e  9000              STR      r0,[sp,#0]
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       AES_KeyInit
;;;204    
;;;205      /* AES configuration */
;;;206      AES_InitStructure.AES_Operation = AES_Operation_KeyDerivAndDecryp;
000036  2018              MOVS     r0,#0x18
000038  e9cd0904          STRD     r0,r9,[sp,#0x10]
;;;207      AES_InitStructure.AES_Chaining = AES_Chaining_ECB;
;;;208      AES_InitStructure.AES_DataType = AES_DataType_8b;
00003c  2004              MOVS     r0,#4
;;;209      AES_Init(&AES_InitStructure);
00003e  9006              STR      r0,[sp,#0x18]
000040  a804              ADD      r0,sp,#0x10
000042  f7fffffe          BL       AES_Init
;;;210    
;;;211      /* Enable AES */
;;;212      AES_Cmd(ENABLE);
000046  2001              MOVS     r0,#1
000048  f7fffffe          BL       AES_Cmd
;;;213    
;;;214      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
00004c  e030              B        |L5.176|
                  |L5.78|
;;;215      {
;;;216        AES_WriteSubData(*(uint32_t*)(inputaddr));
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       AES_WriteSubData
;;;217        inputaddr += 4;
;;;218        AES_WriteSubData(*(uint32_t*)(inputaddr));
000054  f8540f04          LDR      r0,[r4,#4]!
000058  f7fffffe          BL       AES_WriteSubData
;;;219        inputaddr += 4;
;;;220        AES_WriteSubData(*(uint32_t*)(inputaddr));
00005c  f8540f04          LDR      r0,[r4,#4]!
000060  f7fffffe          BL       AES_WriteSubData
;;;221        inputaddr += 4;
;;;222        AES_WriteSubData(*(uint32_t*)(inputaddr));
000064  f8540f04          LDR      r0,[r4,#4]!
000068  f7fffffe          BL       AES_WriteSubData
;;;223        inputaddr += 4;
;;;224        
;;;225         /* Wait for CCF flag to be set */
;;;226        counter = 0;
;;;227        do
;;;228        {
;;;229          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;230          counter++;
;;;231        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
00006c  f44f3a80          MOV      r10,#0x10000
000070  1d24              ADDS     r4,r4,#4
000072  f8cd901c          STR      r9,[sp,#0x1c]
                  |L5.118|
000076  2001              MOVS     r0,#1                 ;229
000078  f7fffffe          BL       AES_GetFlagStatus
00007c  9907              LDR      r1,[sp,#0x1c]         ;230
00007e  1c49              ADDS     r1,r1,#1              ;230
000080  9107              STR      r1,[sp,#0x1c]
000082  4551              CMP      r1,r10
000084  d002              BEQ      |L5.140|
000086  2800              CMP      r0,#0
000088  d0f5              BEQ      |L5.118|
00008a  e000              B        |L5.142|
                  |L5.140|
;;;232        
;;;233        if (ccstatus == RESET)
00008c  b1d8              CBZ      r0,|L5.198|
                  |L5.142|
;;;234        {
;;;235          status = ERROR;
;;;236        }
;;;237        else
;;;238        {
;;;239          /* Clear CCF flag */
;;;240          AES_ClearFlag(AES_FLAG_CCF);
00008e  2001              MOVS     r0,#1
000090  f7fffffe          BL       AES_ClearFlag
;;;241    
;;;242          /* Read cipher text */
;;;243          *(uint32_t*)(outputaddr) = AES_ReadSubData();
000094  f7fffffe          BL       AES_ReadSubData
;;;244          outputaddr += 4;
;;;245          *(uint32_t*)(outputaddr) = AES_ReadSubData();
000098  6028              STR      r0,[r5,#0]
00009a  f7fffffe          BL       AES_ReadSubData
;;;246          outputaddr += 4;
;;;247          *(uint32_t*)(outputaddr) = AES_ReadSubData();
00009e  6068              STR      r0,[r5,#4]
0000a0  f7fffffe          BL       AES_ReadSubData
;;;248          outputaddr += 4;
;;;249          *(uint32_t*)(outputaddr) = AES_ReadSubData();
0000a4  60a8              STR      r0,[r5,#8]
0000a6  f7fffffe          BL       AES_ReadSubData
0000aa  60e8              STR      r0,[r5,#0xc]
0000ac  3510              ADDS     r5,r5,#0x10
                  |L5.174|
0000ae  3610              ADDS     r6,r6,#0x10
                  |L5.176|
0000b0  4546              CMP      r6,r8                 ;214
0000b2  d201              BCS      |L5.184|
0000b4  2f00              CMP      r7,#0                 ;214
0000b6  d1ca              BNE      |L5.78|
                  |L5.184|
;;;250          outputaddr += 4;
;;;251        }
;;;252      }
;;;253    
;;;254      /* Disable AES before starting new processing */
;;;255      AES_Cmd(DISABLE);
0000b8  2000              MOVS     r0,#0
0000ba  f7fffffe          BL       AES_Cmd
;;;256    
;;;257      return status;
;;;258    }
0000be  b008              ADD      sp,sp,#0x20
0000c0  4638              MOV      r0,r7                 ;257
0000c2  e8bd87f0          POP      {r4-r10,pc}
                  |L5.198|
0000c6  2700              MOVS     r7,#0                 ;235
0000c8  e7f1              B        |L5.174|
;;;259    
                          ENDP


                          AREA ||i.AES_ECB_Encrypt||, CODE, READONLY, ALIGN=1

                  AES_ECB_Encrypt PROC
;;;96       */
;;;97     ErrorStatus AES_ECB_Encrypt(uint8_t* Key, uint8_t* Input, uint32_t Ilength, uint8_t* Output)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;98     {
000004  b088              SUB      sp,sp,#0x20
;;;99       AES_InitTypeDef AES_InitStructure;
;;;100      AES_KeyInitTypeDef  AES_KeyInitStructure;
;;;101      ErrorStatus status = SUCCESS;
;;;102      uint32_t keyaddr    = (uint32_t)Key;
;;;103      uint32_t inputaddr  = (uint32_t)Input;
;;;104      uint32_t outputaddr = (uint32_t)Output;
;;;105      __IO uint32_t counter = 0;
000006  2600              MOVS     r6,#0
000008  460c              MOV      r4,r1                 ;103
;;;106      uint32_t ccstatus = 0;
;;;107      uint32_t i = 0;
;;;108    
;;;109      /* AES Key initialisation */
;;;110      AES_KeyInitStructure.AES_Key3 = __REV(*(uint32_t*)(keyaddr));
00000a  9607              STR      r6,[sp,#0x1c]
00000c  6801              LDR      r1,[r0,#0]
00000e  461d              MOV      r5,r3                 ;98
000010  ba09              REV      r1,r1
;;;111      keyaddr += 4;
;;;112      AES_KeyInitStructure.AES_Key2 = __REV(*(uint32_t*)(keyaddr));
000012  9103              STR      r1,[sp,#0xc]
000014  6841              LDR      r1,[r0,#4]
000016  4691              MOV      r9,r2                 ;98
000018  ba09              REV      r1,r1
;;;113      keyaddr += 4;
;;;114      AES_KeyInitStructure.AES_Key1 = __REV(*(uint32_t*)(keyaddr));
00001a  9102              STR      r1,[sp,#8]
00001c  6881              LDR      r1,[r0,#8]
00001e  f04f0801          MOV      r8,#1                 ;101
000022  ba09              REV      r1,r1
;;;115      keyaddr += 4;
;;;116      AES_KeyInitStructure.AES_Key0 = __REV(*(uint32_t*)(keyaddr));
000024  9101              STR      r1,[sp,#4]
000026  68c0              LDR      r0,[r0,#0xc]
000028  4637              MOV      r7,r6                 ;107
00002a  ba00              REV      r0,r0
;;;117      AES_KeyInit(&AES_KeyInitStructure);
00002c  9000              STR      r0,[sp,#0]
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       AES_KeyInit
;;;118    
;;;119      /* AES configuration */
;;;120      AES_InitStructure.AES_Operation = AES_Operation_Encryp;
;;;121      AES_InitStructure.AES_Chaining = AES_Chaining_ECB;
;;;122      AES_InitStructure.AES_DataType = AES_DataType_8b;
000034  2004              MOVS     r0,#4
000036  9604              STR      r6,[sp,#0x10]
000038  e9cd6005          STRD     r6,r0,[sp,#0x14]
;;;123      AES_Init(&AES_InitStructure);
00003c  a804              ADD      r0,sp,#0x10
00003e  f7fffffe          BL       AES_Init
;;;124    
;;;125      /* Enable AES */
;;;126      AES_Cmd(ENABLE);
000042  2001              MOVS     r0,#1
000044  f7fffffe          BL       AES_Cmd
;;;127    
;;;128      for(i = 0; ((i < Ilength) && (status != ERROR)); i += 16)
000048  e02f              B        |L6.170|
                  |L6.74|
;;;129      {
;;;130        AES_WriteSubData(*(uint32_t*)(inputaddr));
00004a  6820              LDR      r0,[r4,#0]
00004c  f7fffffe          BL       AES_WriteSubData
;;;131        inputaddr += 4;
;;;132        AES_WriteSubData(*(uint32_t*)(inputaddr));
000050  f8540f04          LDR      r0,[r4,#4]!
000054  f7fffffe          BL       AES_WriteSubData
;;;133        inputaddr += 4;
;;;134        AES_WriteSubData(*(uint32_t*)(inputaddr));
000058  f8540f04          LDR      r0,[r4,#4]!
00005c  f7fffffe          BL       AES_WriteSubData
;;;135        inputaddr += 4;
;;;136        AES_WriteSubData(*(uint32_t*)(inputaddr));
000060  f8540f04          LDR      r0,[r4,#4]!
000064  f7fffffe          BL       AES_WriteSubData
;;;137        inputaddr += 4;
;;;138        
;;;139        /* Wait for CCF flag to be set */
;;;140        counter = 0;
;;;141        do
;;;142        {
;;;143          ccstatus = AES_GetFlagStatus(AES_FLAG_CCF);
;;;144          counter++;
;;;145        }while((counter != AES_CC_TIMEOUT) && (ccstatus == RESET));
000068  f44f3a80          MOV      r10,#0x10000
00006c  1d24              ADDS     r4,r4,#4
00006e  9607              STR      r6,[sp,#0x1c]
                  |L6.112|
000070  2001              MOVS     r0,#1                 ;143
000072  f7fffffe          BL       AES_GetFlagStatus
000076  9907              LDR      r1,[sp,#0x1c]         ;144
000078  1c49              ADDS     r1,r1,#1              ;144
00007a  9107              STR      r1,[sp,#0x1c]
00007c  4551              CMP      r1,r10
00007e  d002              BEQ      |L6.134|
000080  2800              CMP      r0,#0
000082  d0f5              BEQ      |L6.112|
000084  e000              B        |L6.136|
                  |L6.134|
;;;146        
;;;147        if (ccstatus == RESET)
000086  b1e0              CBZ      r0,|L6.194|
                  |L6.136|
;;;148        {
;;;149          status = ERROR;
;;;150        }
;;;151        else
;;;152        {
;;;153          /* Clear CCF flag */
;;;154          AES_ClearFlag(AES_FLAG_CCF);
000088  2001              MOVS     r0,#1
00008a  f7fffffe          BL       AES_ClearFlag
;;;155          /* Read cipher text */
;;;156          *(uint32_t*)(outputaddr) = AES_ReadSubData();
00008e  f7fffffe          BL       AES_ReadSubData
;;;157          outputaddr += 4;
;;;158          *(uint32_t*)(outputaddr) = AES_ReadSubData();
000092  6028              STR      r0,[r5,#0]
000094  f7fffffe          BL       AES_ReadSubData
;;;159          outputaddr += 4;
;;;160          *(uint32_t*)(outputaddr) = AES_ReadSubData();
000098  6068              STR      r0,[r5,#4]
00009a  f7fffffe          BL       AES_ReadSubData
;;;161          outputaddr += 4;
;;;162          *(uint32_t*)(outputaddr) = AES_ReadSubData();
00009e  60a8              STR      r0,[r5,#8]
0000a0  f7fffffe          BL       AES_ReadSubData
0000a4  60e8              STR      r0,[r5,#0xc]
0000a6  3510              ADDS     r5,r5,#0x10
                  |L6.168|
0000a8  3710              ADDS     r7,r7,#0x10
                  |L6.170|
0000aa  454f              CMP      r7,r9                 ;128
0000ac  d202              BCS      |L6.180|
0000ae  f1b80f00          CMP      r8,#0                 ;128
0000b2  d1ca              BNE      |L6.74|
                  |L6.180|
;;;163          outputaddr += 4;
;;;164        }
;;;165      }
;;;166      
;;;167      /* Disable AES before starting new processing */
;;;168      AES_Cmd(DISABLE);
0000b4  2000              MOVS     r0,#0
0000b6  f7fffffe          BL       AES_Cmd
;;;169    
;;;170      return status;
;;;171    }
0000ba  b008              ADD      sp,sp,#0x20
0000bc  4640              MOV      r0,r8                 ;170
0000be  e8bd87f0          POP      {r4-r10,pc}
                  |L6.194|
0000c2  f04f0800          MOV      r8,#0                 ;149
0000c6  e7ef              B        |L6.168|
;;;172    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_aes_util.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REV16|
#line 129 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\4.1.1\\CMSIS\\Include\\core_cmInstr.h"
|__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REVSH|
#line 144
|__asm___20_stm32l1xx_aes_util_c_2d88a9bb____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
