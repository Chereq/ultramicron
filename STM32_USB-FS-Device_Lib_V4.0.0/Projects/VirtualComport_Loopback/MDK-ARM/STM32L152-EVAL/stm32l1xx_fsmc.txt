; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l1xx_fsmc.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l1xx_fsmc.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_fsmc.c]
                          THUMB

                          AREA ||i.FSMC_NORSRAMCmd||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMCmd PROC
;;;255      */
;;;256    void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
000000  0080              LSLS     r0,r0,#2
;;;257    {
;;;258      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;259      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;260      
;;;261      if (NewState != DISABLE)
;;;262      {
;;;263        /* Enable the selected NOR/SRAM Bank by setting the MBKEN bit in the BCRx register */
;;;264        FSMC_Bank1->BTCR[FSMC_Bank] |= FSMC_BCR1_MBKEN;
000002  f1a040c0          SUB      r0,r0,#0x60000000
000006  2900              CMP      r1,#0                 ;261
;;;265      }
;;;266      else
;;;267      {
;;;268        /* Disable the selected NOR/SRAM Bank by clearing the MBKEN bit in the BCRx register */
;;;269        FSMC_Bank1->BTCR[FSMC_Bank] &= (uint32_t)(~FSMC_BCR1_MBKEN);
000008  6801              LDR      r1,[r0,#0]
00000a  d002              BEQ      |L1.18|
00000c  f0410101          ORR      r1,r1,#1              ;264
000010  e001              B        |L1.22|
                  |L1.18|
000012  f0210101          BIC      r1,r1,#1
                  |L1.22|
000016  6001              STR      r1,[r0,#0]            ;264
;;;270      }
;;;271    }
000018  4770              BX       lr
;;;272    
                          ENDP


                          AREA ||i.FSMC_NORSRAMDeInit||, CODE, READONLY, ALIGN=2

                  FSMC_NORSRAMDeInit PROC
;;;101      */
;;;102    void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
000000  0081              LSLS     r1,r0,#2
;;;103    {
000002  f1a141c0          SUB      r1,r1,#0x60000000
000006  b148              CBZ      r0,|L2.28|
;;;104      /* Check the parameter */
;;;105      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
;;;106      
;;;107      /* FSMC_Bank1_NORSRAM1 */
;;;108      if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
;;;109      {
;;;110        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
;;;111      }
;;;112      /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
;;;113      else
;;;114      {   
;;;115        FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
000008  f24300d2          MOV      r0,#0x30d2
00000c  f8c10000          STR.W    r0,[r1,#0]
                  |L2.16|
;;;116      }
;;;117      FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
000010  f06f4070          MVN      r0,#0xf0000000
000014  6048              STR      r0,[r1,#4]
;;;118      FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
000016  f8c10104          STR      r0,[r1,#0x104]
;;;119    }
00001a  4770              BX       lr
                  |L2.28|
00001c  f04f4220          MOV      r2,#0xa0000000        ;110
000020  f24300db          MOV      r0,#0x30db            ;110
000024  6010              STR      r0,[r2,#0]            ;110
000026  e7f3              B        |L2.16|
;;;120    
                          ENDP


                          AREA ||i.FSMC_NORSRAMInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMInit PROC
;;;128      */
;;;129    void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b510              PUSH     {r4,lr}
;;;130    { 
000002  e9d01201          LDRD     r1,r2,[r0,#4]
;;;131      /* Check the parameters */
;;;132      assert_param(IS_FSMC_NORSRAM_BANK(FSMC_NORSRAMInitStruct->FSMC_Bank));
;;;133      assert_param(IS_FSMC_MUX(FSMC_NORSRAMInitStruct->FSMC_DataAddressMux));
;;;134      assert_param(IS_FSMC_MEMORY(FSMC_NORSRAMInitStruct->FSMC_MemoryType));
;;;135      assert_param(IS_FSMC_MEMORY_WIDTH(FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth));
;;;136      assert_param(IS_FSMC_BURSTMODE(FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode));
;;;137      assert_param(IS_FSMC_ASYNWAIT(FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait));
;;;138      assert_param(IS_FSMC_WAIT_POLARITY(FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity));
;;;139      assert_param(IS_FSMC_WRAP_MODE(FSMC_NORSRAMInitStruct->FSMC_WrapMode));
;;;140      assert_param(IS_FSMC_WAIT_SIGNAL_ACTIVE(FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive));
;;;141      assert_param(IS_FSMC_WRITE_OPERATION(FSMC_NORSRAMInitStruct->FSMC_WriteOperation));
;;;142      assert_param(IS_FSMC_WAITE_SIGNAL(FSMC_NORSRAMInitStruct->FSMC_WaitSignal));
;;;143      assert_param(IS_FSMC_EXTENDED_MODE(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode));
;;;144      assert_param(IS_FSMC_WRITE_BURST(FSMC_NORSRAMInitStruct->FSMC_WriteBurst));  
;;;145      assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime));
;;;146      assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime));
;;;147      assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime));
;;;148      assert_param(IS_FSMC_TURNAROUND_TIME(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration));
;;;149      assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
;;;150      assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
;;;151      assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
;;;152      
;;;153      /* Bank1 NOR/SRAM control register configuration */ 
;;;154      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
000006  4311              ORRS     r1,r1,r2
000008  e9d02303          LDRD     r2,r3,[r0,#0xc]
00000c  431a              ORRS     r2,r2,r3
00000e  4311              ORRS     r1,r1,r2
000010  6942              LDR      r2,[r0,#0x14]
000012  4311              ORRS     r1,r1,r2
000014  6982              LDR      r2,[r0,#0x18]
000016  4311              ORRS     r1,r1,r2
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  4311              ORRS     r1,r1,r2
00001c  6a02              LDR      r2,[r0,#0x20]
00001e  4311              ORRS     r1,r1,r2
000020  6a42              LDR      r2,[r0,#0x24]
000022  4311              ORRS     r1,r1,r2
000024  6a82              LDR      r2,[r0,#0x28]
000026  4311              ORRS     r1,r1,r2
000028  6ac2              LDR      r2,[r0,#0x2c]
00002a  4311              ORRS     r1,r1,r2
00002c  6b02              LDR      r2,[r0,#0x30]
00002e  4311              ORRS     r1,r1,r2
000030  6802              LDR      r2,[r0,#0]
000032  0092              LSLS     r2,r2,#2
000034  f1a242c0          SUB      r2,r2,#0x60000000
000038  6011              STR      r1,[r2,#0]
;;;155                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
;;;156                FSMC_NORSRAMInitStruct->FSMC_MemoryType |
;;;157                FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
;;;158                FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
;;;159                FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
;;;160                FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
;;;161                FSMC_NORSRAMInitStruct->FSMC_WrapMode |
;;;162                FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
;;;163                FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
;;;164                FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
;;;165                FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
;;;166                FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
;;;167    
;;;168      if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
00003a  6881              LDR      r1,[r0,#8]
00003c  2908              CMP      r1,#8
00003e  d107              BNE      |L3.80|
;;;169      {
;;;170        FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)FSMC_BCR1_FACCEN;
000040  6801              LDR      r1,[r0,#0]
000042  0089              LSLS     r1,r1,#2
000044  f1a141c0          SUB      r1,r1,#0x60000000
000048  680a              LDR      r2,[r1,#0]
00004a  f0420240          ORR      r2,r2,#0x40
00004e  600a              STR      r2,[r1,#0]
                  |L3.80|
;;;171      }
;;;172      
;;;173      /* Bank1 NOR/SRAM timing register configuration */
;;;174      FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
000050  6b41              LDR      r1,[r0,#0x34]
000052  e9d12300          LDRD     r2,r3,[r1,#0]
000056  ea421203          ORR      r2,r2,r3,LSL #4
00005a  688b              LDR      r3,[r1,#8]
00005c  898c              LDRH     r4,[r1,#0xc]
00005e  021b              LSLS     r3,r3,#8
000060  ea434304          ORR      r3,r3,r4,LSL #16
000064  431a              ORRS     r2,r2,r3
000066  8a0b              LDRH     r3,[r1,#0x10]
000068  ea425203          ORR      r2,r2,r3,LSL #20
00006c  7d0b              LDRB     r3,[r1,#0x14]
00006e  6989              LDR      r1,[r1,#0x18]
000070  ea426203          ORR      r2,r2,r3,LSL #24
000074  430a              ORRS     r2,r2,r1
000076  6801              LDR      r1,[r0,#0]
000078  0089              LSLS     r1,r1,#2
00007a  f1a141c0          SUB      r1,r1,#0x60000000
00007e  604a              STR      r2,[r1,#4]
;;;175                (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
;;;176                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
;;;177                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;178                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
;;;179                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
;;;180                (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
;;;181                 FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
;;;182                
;;;183        
;;;184      /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
;;;185      if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
000080  6ac1              LDR      r1,[r0,#0x2c]
000082  f5b14f80          CMP      r1,#0x4000
000086  d008              BEQ      |L3.154|
;;;186      {
;;;187        assert_param(IS_FSMC_ADDRESS_SETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime));
;;;188        assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
;;;189        assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
;;;190        assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
;;;191        assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
;;;192        assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
;;;193        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
;;;194                  (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
;;;195                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
;;;196                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
;;;197                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
;;;198                  (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
;;;199                   FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
;;;200      }
;;;201      else
;;;202      {
;;;203        FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
000088  6800              LDR      r0,[r0,#0]
00008a  f06f4170          MVN      r1,#0xf0000000
00008e  0080              LSLS     r0,r0,#2
000090  f1a040c0          SUB      r0,r0,#0x60000000
000094  f8c01104          STR      r1,[r0,#0x104]
;;;204      }
;;;205    }
000098  bd10              POP      {r4,pc}
                  |L3.154|
00009a  6b81              LDR      r1,[r0,#0x38]         ;193
00009c  e9d12300          LDRD     r2,r3,[r1,#0]         ;193
0000a0  ea421203          ORR      r2,r2,r3,LSL #4       ;193
0000a4  688b              LDR      r3,[r1,#8]            ;193
0000a6  8a0c              LDRH     r4,[r1,#0x10]         ;193
0000a8  021b              LSLS     r3,r3,#8              ;193
0000aa  ea435304          ORR      r3,r3,r4,LSL #20      ;193
0000ae  431a              ORRS     r2,r2,r3              ;193
0000b0  7d0b              LDRB     r3,[r1,#0x14]         ;193
0000b2  6989              LDR      r1,[r1,#0x18]         ;193
0000b4  ea426203          ORR      r2,r2,r3,LSL #24      ;193
0000b8  6800              LDR      r0,[r0,#0]            ;193
0000ba  430a              ORRS     r2,r2,r1              ;193
0000bc  0080              LSLS     r0,r0,#2              ;193
0000be  f1a040c0          SUB      r0,r0,#0x60000000     ;193
0000c2  f8c02104          STR      r2,[r0,#0x104]        ;193
0000c6  bd10              POP      {r4,pc}
;;;206    
                          ENDP


                          AREA ||i.FSMC_NORSRAMStructInit||, CODE, READONLY, ALIGN=1

                  FSMC_NORSRAMStructInit PROC
;;;212      */
;;;213    void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
000000  b510              PUSH     {r4,lr}
;;;214    {  
;;;215      /* Reset NOR/SRAM Init structure parameters values */
;;;216      FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
000002  2100              MOVS     r1,#0
;;;217      FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
000004  2202              MOVS     r2,#2
000006  e9c01200          STRD     r1,r2,[r0,#0]
;;;218      FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
;;;219      FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
00000a  6081              STR      r1,[r0,#8]
;;;220      FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
00000c  60c1              STR      r1,[r0,#0xc]
;;;221      FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
00000e  6101              STR      r1,[r0,#0x10]
;;;222      FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000010  6141              STR      r1,[r0,#0x14]
;;;223      FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
000012  6181              STR      r1,[r0,#0x18]
;;;224      FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
;;;225      FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
000014  02d2              LSLS     r2,r2,#11
000016  61c1              STR      r1,[r0,#0x1c]
000018  e9c01208          STRD     r1,r2,[r0,#0x20]
;;;226      FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
00001c  0052              LSLS     r2,r2,#1
00001e  e9c0210a          STRD     r2,r1,[r0,#0x28]
;;;227      FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
;;;228      FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
;;;229      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000022  6301              STR      r1,[r0,#0x30]
000024  6b43              LDR      r3,[r0,#0x34]
000026  220f              MOVS     r2,#0xf
;;;230      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000028  601a              STR      r2,[r3,#0]
00002a  6b43              LDR      r3,[r0,#0x34]
;;;231      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00002c  605a              STR      r2,[r3,#4]
00002e  6b44              LDR      r4,[r0,#0x34]
000030  23ff              MOVS     r3,#0xff
;;;232      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
000032  60a3              STR      r3,[r4,#8]
000034  6b44              LDR      r4,[r0,#0x34]
;;;233      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
000036  60e2              STR      r2,[r4,#0xc]
000038  6b44              LDR      r4,[r0,#0x34]
;;;234      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
00003a  6122              STR      r2,[r4,#0x10]
00003c  6b44              LDR      r4,[r0,#0x34]
;;;235      FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
00003e  6162              STR      r2,[r4,#0x14]
000040  6b44              LDR      r4,[r0,#0x34]
;;;236      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
000042  61a1              STR      r1,[r4,#0x18]
000044  6b84              LDR      r4,[r0,#0x38]
;;;237      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
000046  6022              STR      r2,[r4,#0]
000048  6b84              LDR      r4,[r0,#0x38]
;;;238      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
00004a  6062              STR      r2,[r4,#4]
00004c  6b84              LDR      r4,[r0,#0x38]
;;;239      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
00004e  60a3              STR      r3,[r4,#8]
000050  6b83              LDR      r3,[r0,#0x38]
;;;240      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
000052  60da              STR      r2,[r3,#0xc]
000054  6b83              LDR      r3,[r0,#0x38]
;;;241      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
000056  611a              STR      r2,[r3,#0x10]
000058  6b83              LDR      r3,[r0,#0x38]
;;;242      FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
00005a  615a              STR      r2,[r3,#0x14]
00005c  6b80              LDR      r0,[r0,#0x38]
00005e  6181              STR      r1,[r0,#0x18]
;;;243    }
000060  bd10              POP      {r4,pc}
;;;244    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_fsmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_fsmc_c_2e710976____REV16|
#line 129 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\4.1.1\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_stm32l1xx_fsmc_c_2e710976____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32l1xx_fsmc_c_2e710976____REVSH|
#line 144
|__asm___16_stm32l1xx_fsmc_c_2e710976____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
