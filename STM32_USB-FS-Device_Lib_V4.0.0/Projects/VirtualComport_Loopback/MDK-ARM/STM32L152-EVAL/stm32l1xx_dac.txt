; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\stm32l152-eval\stm32l1xx_dac.o --asm_dir=.\STM32L152-EVAL\ --list_dir=.\STM32L152-EVAL\ --depend=.\stm32l152-eval\stm32l1xx_dac.d --cpu=Cortex-M3 --apcs=interwork -O3 -I..\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32L1xx\Include -I..\..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\inc -I..\..\..\Utilities\STM32_EVAL -I..\..\..\Utilities\STM32_EVAL\Common -I..\..\..\Utilities\STM32_EVAL\STM32L152_EVAL -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\PACK\ARM\CMSIS\4.1.1\CMSIS\Include -IC:\Keil\ARM\Inc\ST\STM32L1xx -D__MICROLIB -DSTM32L1XX_MD -DUSE_STDPERIPH_DRIVER -DSTM32L1XX_MD -DUSE_STM32L152_EVAL ..\..\..\Libraries\STM32L1xx_StdPeriph_Driver\src\stm32l1xx_dac.c]
                          THUMB

                          AREA ||i.DAC_ClearFlag||, CODE, READONLY, ALIGN=2

                  DAC_ClearFlag PROC
;;;599      */
;;;600    void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
000000  4081              LSLS     r1,r1,r0
;;;601    {
;;;602      /* Check the parameters */
;;;603      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;604      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;605    
;;;606      /* Clear the selected DAC flags */
;;;607      DAC->SR = (DAC_FLAG << DAC_Channel);
000002  4801              LDR      r0,|L1.8|
000004  6001              STR      r1,[r0,#0]
;;;608    }
000006  4770              BX       lr
;;;609    
                          ENDP

                  |L1.8|
                          DCD      0x40007434

                          AREA ||i.DAC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  DAC_ClearITPendingBit PROC
;;;660      */
;;;661    void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
000000  4081              LSLS     r1,r1,r0
;;;662    {
;;;663      /* Check the parameters */
;;;664      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;665      assert_param(IS_DAC_IT(DAC_IT)); 
;;;666    
;;;667      /* Clear the selected DAC interrupt pending bits */
;;;668      DAC->SR = (DAC_IT << DAC_Channel);
000002  4801              LDR      r0,|L2.8|
000004  6001              STR      r1,[r0,#0]
;;;669    }
000006  4770              BX       lr
;;;670    
                          ENDP

                  |L2.8|
                          DCD      0x40007434

                          AREA ||i.DAC_Cmd||, CODE, READONLY, ALIGN=2

                  DAC_Cmd PROC
;;;238      */
;;;239    void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4a04              LDR      r2,|L3.20|
;;;240    {
;;;241      /* Check the parameters */
;;;242      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;243      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;244    
;;;245      if (NewState != DISABLE)
;;;246      {
;;;247        /* Enable the selected DAC channel */
;;;248        DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
000002  2301              MOVS     r3,#1
000004  4083              LSLS     r3,r3,r0
;;;249      }
;;;250      else
;;;251      {
;;;252        /* Disable the selected DAC channel */
;;;253        DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
000006  6810              LDR      r0,[r2,#0]
000008  b109              CBZ      r1,|L3.14|
00000a  4318              ORRS     r0,r0,r3              ;248
00000c  e000              B        |L3.16|
                  |L3.14|
00000e  4398              BICS     r0,r0,r3
                  |L3.16|
000010  6010              STR      r0,[r2,#0]            ;248
;;;254      }
;;;255    }
000012  4770              BX       lr
;;;256    
                          ENDP

                  |L3.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DMACmd||, CODE, READONLY, ALIGN=2

                  DAC_DMACmd PROC
;;;485      */
;;;486    void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  4a04              LDR      r2,|L4.20|
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;490      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;491    
;;;492      if (NewState != DISABLE)
;;;493      {
;;;494        /* Enable the selected DAC channel DMA request */
;;;495        DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
000002  1493              ASRS     r3,r2,#18
000004  4083              LSLS     r3,r3,r0
;;;496      }
;;;497      else
;;;498      {
;;;499        /* Disable the selected DAC channel DMA request */
;;;500        DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
000006  6810              LDR      r0,[r2,#0]
000008  b109              CBZ      r1,|L4.14|
00000a  4318              ORRS     r0,r0,r3              ;495
00000c  e000              B        |L4.16|
                  |L4.14|
00000e  4398              BICS     r0,r0,r3
                  |L4.16|
000010  6010              STR      r0,[r2,#0]            ;495
;;;501      }
;;;502    }
000012  4770              BX       lr
;;;503    
                          ENDP

                  |L4.20|
                          DCD      0x40007400

                          AREA ||i.DAC_DeInit||, CODE, READONLY, ALIGN=1

                  DAC_DeInit PROC
;;;158      */
;;;159    void DAC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;160    {
;;;161      /* Enable DAC reset state */
;;;162      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
000002  2101              MOVS     r1,#1
000004  074c              LSLS     r4,r1,#29
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;163      /* Release DAC from reset state */
;;;164      RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
00000c  4620              MOV      r0,r4
00000e  e8bd4010          POP      {r4,lr}
000012  2100              MOVS     r1,#0
000014  f7ffbffe          B.W      RCC_APB1PeriphResetCmd
;;;165    }
;;;166    
                          ENDP


                          AREA ||i.DAC_DualSoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_DualSoftwareTriggerCmd PROC
;;;291      */
;;;292    void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
000000  4905              LDR      r1,|L6.24|
;;;293    {
;;;294      /* Check the parameters */
;;;295      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;296    
;;;297      if (NewState != DISABLE)
000002  2800              CMP      r0,#0
;;;298      {
;;;299        /* Enable software trigger for both DAC channels */
;;;300        DAC->SWTRIGR |= DUAL_SWTRIG_SET;
;;;301      }
;;;302      else
;;;303      {
;;;304        /* Disable software trigger for both DAC channels */
;;;305        DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L6.14|
000008  f0400003          ORR      r0,r0,#3              ;300
00000c  e001              B        |L6.18|
                  |L6.14|
00000e  f0200003          BIC      r0,r0,#3
                  |L6.18|
000012  6008              STR      r0,[r1,#0]            ;300
;;;306      }
;;;307    }
000014  4770              BX       lr
;;;308    
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      0x40007404

                          AREA ||i.DAC_GetDataOutputValue||, CODE, READONLY, ALIGN=2

                  DAC_GetDataOutputValue PROC
;;;441      */
;;;442    uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
000000  4904              LDR      r1,|L7.20|
;;;443    {
000002  b508              PUSH     {r3,lr}
;;;444      __IO uint32_t tmp = 0;
;;;445      
;;;446      /* Check the parameters */
;;;447      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;448      
;;;449      tmp = (uint32_t) DAC_BASE ;
;;;450      tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
000004  eb010090          ADD      r0,r1,r0,LSR #2
000008  302c              ADDS     r0,r0,#0x2c
;;;451      
;;;452      /* Returns the DAC channel data output register value */
;;;453      return (uint16_t) (*(__IO uint32_t*) tmp);
00000a  9000              STR      r0,[sp,#0]
00000c  6800              LDR      r0,[r0,#0]
00000e  b280              UXTH     r0,r0
;;;454    }
000010  bd08              POP      {r3,pc}
;;;455    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40007400

                          AREA ||i.DAC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  DAC_GetFlagStatus PROC
;;;566      */
;;;567    FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
000000  4b04              LDR      r3,|L8.20|
;;;568    {
000002  4602              MOV      r2,r0
;;;569      FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;570      /* Check the parameters */
;;;571      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;572      assert_param(IS_DAC_FLAG(DAC_FLAG));
;;;573    
;;;574      /* Check the status of the specified DAC flag */
;;;575      if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
000006  681b              LDR      r3,[r3,#0]
000008  4091              LSLS     r1,r1,r2
00000a  420b              TST      r3,r1
00000c  d000              BEQ      |L8.16|
;;;576      {
;;;577        /* DAC_FLAG is set */
;;;578        bitstatus = SET;
00000e  2001              MOVS     r0,#1
                  |L8.16|
;;;579      }
;;;580      else
;;;581      {
;;;582        /* DAC_FLAG is reset */
;;;583        bitstatus = RESET;
;;;584      }
;;;585      /* Return the DAC_FLAG status */
;;;586      return  bitstatus;
;;;587    }
000010  4770              BX       lr
;;;588    
                          ENDP

000012  0000              DCW      0x0000
                  |L8.20|
                          DCD      0x40007434

                          AREA ||i.DAC_GetITStatus||, CODE, READONLY, ALIGN=2

                  DAC_GetITStatus PROC
;;;622      */
;;;623    ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
000000  4a07              LDR      r2,|L9.32|
;;;624    {
000002  4603              MOV      r3,r0
;;;625      ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;626      uint32_t enablestatus = 0;
;;;627      
;;;628      /* Check the parameters */
;;;629      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;630      assert_param(IS_DAC_IT(DAC_IT));
;;;631    
;;;632      /* Get the DAC_IT enable bit status */
;;;633      enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
000006  6812              LDR      r2,[r2,#0]
000008  4099              LSLS     r1,r1,r3
;;;634      
;;;635      /* Check the status of the specified DAC interrupt */
;;;636      if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
00000a  4b05              LDR      r3,|L9.32|
00000c  400a              ANDS     r2,r2,r1              ;633
00000e  3334              ADDS     r3,r3,#0x34
000010  681b              LDR      r3,[r3,#0]
000012  420b              TST      r3,r1
000014  d002              BEQ      |L9.28|
000016  2a00              CMP      r2,#0
000018  d000              BEQ      |L9.28|
;;;637      {
;;;638        /* DAC_IT is set */
;;;639        bitstatus = SET;
00001a  2001              MOVS     r0,#1
                  |L9.28|
;;;640      }
;;;641      else
;;;642      {
;;;643        /* DAC_IT is reset */
;;;644        bitstatus = RESET;
;;;645      }
;;;646      /* Return the DAC_IT status */
;;;647      return  bitstatus;
;;;648    }
00001c  4770              BX       lr
;;;649    
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
                          DCD      0x40007400

                          AREA ||i.DAC_ITConfig||, CODE, READONLY, ALIGN=2

                  DAC_ITConfig PROC
;;;534      */ 
;;;535    void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
000000  4b04              LDR      r3,|L10.20|
;;;536    {
;;;537      /* Check the parameters */
;;;538      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;539      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;540      assert_param(IS_DAC_IT(DAC_IT)); 
;;;541    
;;;542      if (NewState != DISABLE)
;;;543      {
;;;544        /* Enable the selected DAC interrupts */
;;;545        DAC->CR |=  (DAC_IT << DAC_Channel);
000002  4081              LSLS     r1,r1,r0
;;;546      }
;;;547      else
;;;548      {
;;;549        /* Disable the selected DAC interrupts */
;;;550        DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
000004  6818              LDR      r0,[r3,#0]
000006  b10a              CBZ      r2,|L10.12|
000008  4308              ORRS     r0,r0,r1              ;545
00000a  e000              B        |L10.14|
                  |L10.12|
00000c  4388              BICS     r0,r0,r1
                  |L10.14|
00000e  6018              STR      r0,[r3,#0]            ;545
;;;551      }
;;;552    }
000010  4770              BX       lr
;;;553    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007400

                          AREA ||i.DAC_Init||, CODE, READONLY, ALIGN=2

                  DAC_Init PROC
;;;177      */
;;;178    void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;179    {
;;;180      uint32_t tmpreg1 = 0, tmpreg2 = 0;
;;;181    
;;;182      /* Check the DAC parameters */
;;;183      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;184      assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
;;;185      assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
;;;186      assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
;;;187      assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
;;;188    
;;;189    /*---------------------------- DAC CR Configuration --------------------------*/
;;;190      /* Get the DAC CR value */
;;;191      tmpreg1 = DAC->CR;
000002  4c08              LDR      r4,|L11.36|
000004  6823              LDR      r3,[r4,#0]
;;;192      /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
;;;193      tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
000006  f64072fe          MOV      r2,#0xffe
00000a  4082              LSLS     r2,r2,r0
00000c  4393              BICS     r3,r3,r2
00000e  e9d12500          LDRD     r2,r5,[r1,#0]
;;;194      /* Configure for the selected DAC channel: buffer output, trigger, wave generation,
;;;195         mask/amplitude for wave generation */
;;;196      /* Set TSELx and TENx bits according to DAC_Trigger value */
;;;197      /* Set WAVEx bits according to DAC_WaveGeneration value */
;;;198      /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
;;;199      /* Set BOFFx bit according to DAC_OutputBuffer value */   
;;;200      tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
000012  432a              ORRS     r2,r2,r5
000014  e9d15102          LDRD     r5,r1,[r1,#8]
000018  430d              ORRS     r5,r5,r1
00001a  432a              ORRS     r2,r2,r5
;;;201                 DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
;;;202      /* Calculate CR register value depending on DAC_Channel */
;;;203      tmpreg1 |= tmpreg2 << DAC_Channel;
00001c  4082              LSLS     r2,r2,r0
00001e  431a              ORRS     r2,r2,r3
;;;204      /* Write to DAC CR */
;;;205      DAC->CR = tmpreg1;
000020  6022              STR      r2,[r4,#0]
;;;206    }
000022  bd30              POP      {r4,r5,pc}
;;;207    
                          ENDP

                  |L11.36|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel1Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel1Data PROC
;;;352      */
;;;353    void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
000000  4a03              LDR      r2,|L12.16|
;;;354    {  
000002  b508              PUSH     {r3,lr}
;;;355      __IO uint32_t tmp = 0;
;;;356      
;;;357      /* Check the parameters */
;;;358      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;359      assert_param(IS_DAC_DATA(Data));
;;;360      
;;;361      tmp = (uint32_t)DAC_BASE; 
;;;362      tmp += DHR12R1_OFFSET + DAC_Align;
000004  4410              ADD      r0,r0,r2
000006  3008              ADDS     r0,r0,#8
;;;363    
;;;364      /* Set the DAC channel1 selected data holding register */
;;;365      *(__IO uint32_t *) tmp = Data;
000008  9000              STR      r0,[sp,#0]
00000a  6001              STR      r1,[r0,#0]
;;;366    }
00000c  bd08              POP      {r3,pc}
;;;367    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40007400

                          AREA ||i.DAC_SetChannel2Data||, CODE, READONLY, ALIGN=2

                  DAC_SetChannel2Data PROC
;;;377      */
;;;378    void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
000000  4a03              LDR      r2,|L13.16|
;;;379    {
000002  b508              PUSH     {r3,lr}
;;;380      __IO uint32_t tmp = 0;
;;;381    
;;;382      /* Check the parameters */
;;;383      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;384      assert_param(IS_DAC_DATA(Data));
;;;385      
;;;386      tmp = (uint32_t)DAC_BASE;
;;;387      tmp += DHR12R2_OFFSET + DAC_Align;
000004  4410              ADD      r0,r0,r2
000006  3014              ADDS     r0,r0,#0x14
;;;388    
;;;389      /* Set the DAC channel2 selected data holding register */
;;;390      *(__IO uint32_t *)tmp = Data;
000008  9000              STR      r0,[sp,#0]
00000a  6001              STR      r1,[r0,#0]
;;;391    }
00000c  bd08              POP      {r3,pc}
;;;392    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40007400

                          AREA ||i.DAC_SetDualChannelData||, CODE, READONLY, ALIGN=2

                  DAC_SetDualChannelData PROC
;;;407      */
;;;408    void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
000000  2808              CMP      r0,#8
;;;409    {
000002  d005              BEQ      |L14.16|
;;;410      uint32_t data = 0, tmp = 0;
;;;411      
;;;412      /* Check the parameters */
;;;413      assert_param(IS_DAC_ALIGN(DAC_Align));
;;;414      assert_param(IS_DAC_DATA(Data1));
;;;415      assert_param(IS_DAC_DATA(Data2));
;;;416      
;;;417      /* Calculate and set dual DAC data holding register value */
;;;418      if (DAC_Align == DAC_Align_8b_R)
;;;419      {
;;;420        data = ((uint32_t)Data2 << 8) | Data1; 
;;;421      }
;;;422      else
;;;423      {
;;;424        data = ((uint32_t)Data2 << 16) | Data1;
000004  ea424101          ORR      r1,r2,r1,LSL #16
                  |L14.8|
;;;425      }
;;;426      
;;;427      tmp = (uint32_t)DAC_BASE;
000008  4a03              LDR      r2,|L14.24|
;;;428      tmp += DHR12RD_OFFSET + DAC_Align;
00000a  4410              ADD      r0,r0,r2
;;;429    
;;;430      /* Set the dual DAC selected data holding register */
;;;431      *(__IO uint32_t *)tmp = data;
00000c  6201              STR      r1,[r0,#0x20]
;;;432    }
00000e  4770              BX       lr
                  |L14.16|
000010  ea422101          ORR      r1,r2,r1,LSL #8       ;420
000014  e7f8              B        |L14.8|
;;;433    
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40007400

                          AREA ||i.DAC_SoftwareTriggerCmd||, CODE, READONLY, ALIGN=2

                  DAC_SoftwareTriggerCmd PROC
;;;266      */
;;;267    void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
000000  0903              LSRS     r3,r0,#4
;;;268    {
;;;269      /* Check the parameters */
;;;270      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;271      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;272    
;;;273      if (NewState != DISABLE)
;;;274      {
;;;275        /* Enable software trigger for the selected DAC channel */
;;;276        DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
000002  4a05              LDR      r2,|L15.24|
000004  2001              MOVS     r0,#1
000006  4098              LSLS     r0,r0,r3
000008  2900              CMP      r1,#0                 ;273
;;;277      }
;;;278      else
;;;279      {
;;;280        /* Disable software trigger for the selected DAC channel */
;;;281        DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
00000a  6811              LDR      r1,[r2,#0]
00000c  d001              BEQ      |L15.18|
00000e  4301              ORRS     r1,r1,r0              ;276
000010  e000              B        |L15.20|
                  |L15.18|
000012  4381              BICS     r1,r1,r0
                  |L15.20|
000014  6011              STR      r1,[r2,#0]            ;276
;;;282      }
;;;283    }
000016  4770              BX       lr
;;;284    
                          ENDP

                  |L15.24|
                          DCD      0x40007404

                          AREA ||i.DAC_StructInit||, CODE, READONLY, ALIGN=1

                  DAC_StructInit PROC
;;;213      */
;;;214    void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
000000  2100              MOVS     r1,#0
;;;215    {
;;;216    /*--------------- Reset DAC init structure parameters values -----------------*/
;;;217      /* Initialize the DAC_Trigger member */
;;;218      DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
;;;219      /* Initialize the DAC_WaveGeneration member */
;;;220      DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
000002  6001              STR      r1,[r0,#0]
;;;221      /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
;;;222      DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
000004  6041              STR      r1,[r0,#4]
;;;223      /* Initialize the DAC_OutputBuffer member */
;;;224      DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
000006  6081              STR      r1,[r0,#8]
000008  60c1              STR      r1,[r0,#0xc]
;;;225    }
00000a  4770              BX       lr
;;;226    
                          ENDP


                          AREA ||i.DAC_WaveGenerationCmd||, CODE, READONLY, ALIGN=2

                  DAC_WaveGenerationCmd PROC
;;;323      */
;;;324    void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
000000  4b04              LDR      r3,|L17.20|
;;;325    {
;;;326      /* Check the parameters */
;;;327      assert_param(IS_DAC_CHANNEL(DAC_Channel));
;;;328      assert_param(IS_DAC_WAVE(DAC_Wave)); 
;;;329      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;330    
;;;331      if (NewState != DISABLE)
;;;332      {
;;;333        /* Enable the selected wave generation for the selected DAC channel */
;;;334        DAC->CR |= DAC_Wave << DAC_Channel;
000002  4081              LSLS     r1,r1,r0
;;;335      }
;;;336      else
;;;337      {
;;;338        /* Disable the selected wave generation for the selected DAC channel */
;;;339        DAC->CR &= ~(DAC_Wave << DAC_Channel);
000004  6818              LDR      r0,[r3,#0]
000006  b10a              CBZ      r2,|L17.12|
000008  4308              ORRS     r0,r0,r1              ;334
00000a  e000              B        |L17.14|
                  |L17.12|
00000c  4388              BICS     r0,r0,r1
                  |L17.14|
00000e  6018              STR      r0,[r3,#0]            ;334
;;;340      }
;;;341    }
000010  4770              BX       lr
;;;342    
                          ENDP

000012  0000              DCW      0x0000
                  |L17.20|
                          DCD      0x40007400

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32L1xx_StdPeriph_Driver\\src\\stm32l1xx_dac.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_dac_c_4da4a0a9____REV16|
#line 129 "C:\\Keil\\ARM\\PACK\\ARM\\CMSIS\\4.1.1\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_stm32l1xx_dac_c_4da4a0a9____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32l1xx_dac_c_4da4a0a9____REVSH|
#line 144
|__asm___15_stm32l1xx_dac_c_4da4a0a9____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
